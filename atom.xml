<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jeromezjl.github.io</id>
    <title>Jerome</title>
    <updated>2022-03-27T15:45:25.370Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jeromezjl.github.io"/>
    <link rel="self" href="https://jeromezjl.github.io/atom.xml"/>
    <subtitle>.......</subtitle>
    <logo>https://jeromezjl.github.io/images/avatar.png</logo>
    <icon>https://jeromezjl.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Jerome</rights>
    <entry>
        <title type="html"><![CDATA[【ML】决策树]]></title>
        <id>https://jeromezjl.github.io/post/jue-ce-shu/</id>
        <link href="https://jeromezjl.github.io/post/jue-ce-shu/">
        </link>
        <updated>2022-03-27T07:47:40.000Z</updated>
        <content type="html"><![CDATA[<p>b站讲解<br>
https://www.bilibili.com/video/BV1T7411b7DG?from=search&amp;seid=4602675497552466282&amp;spm_id_from=333.337.0.0</p>
<h1 id="决策树的构建">决策树的构建</h1>
<p><strong>C4.5算法</strong></p>
<p><code>参考文章：</code><br>
https://blog.csdn.net/zjsghww/article/details/51638126</p>
<p><code>算法步骤：</code><br>
1）计算总信息熵 Entropy<br>
2）分别计算每个属性信息熵<br>
3）总信息熵 - 属性信息熵 得到信息增益 Gain(A)<br>
4）计算信息增益率 GainRatio(A) = Gain / Ent<br>
5）增益率max的为根节点</p>
<p><code>注意</code><br>
总信息熵用结果的概率进行计算<br>
属性信息熵：<br>
∑（ p(属性概率) * ∑ -（  p(该属性内成功概率) log2 p + p(该属性内失败概率)log2 p ））</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenCV 浅记]]></title>
        <id>https://jeromezjl.github.io/post/opencv-qian-ji/</id>
        <link href="https://jeromezjl.github.io/post/opencv-qian-ji/">
        </link>
        <updated>2022-03-22T12:07:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="matplotlib-显示-opencv-图像失真原因">matplotlib 显示 opencv 图像失真原因</h1>
<p>https://blog.csdn.net/Strive_For_Future/article/details/108566534</p>
<p>注意：<br>
opencv 在 anaconda 中文件夹的名称叫 cv2<br>
可在编译器中输入  cv2.<strong>path</strong> 来查看 cv2 安装地址，从而找到对应的算法文件</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jupyter notebook 的 Anaconda 配置]]></title>
        <id>https://jeromezjl.github.io/post/jupyter-notebook-de-anaconda-pei-zhi/</id>
        <link href="https://jeromezjl.github.io/post/jupyter-notebook-de-anaconda-pei-zhi/">
        </link>
        <updated>2022-03-22T09:25:21.000Z</updated>
        <content type="html"><![CDATA[<p>下载anaconda之后，用pycharm分配虚拟环境自己摸索一下就会了<br>
但是jupyter一直只有一个虚拟环境，于是上网搜索了一下<br>
jupyter需要手动分配内核，具体参考：</p>
<p>https://blog.csdn.net/weixin_44799217/article/details/116056976<br>
https://zhuanlan.zhihu.com/p/81605893</p>
<p><strong>总结</strong><br>
每次创建虚拟环境的时候，两步配置jupyter内核：</p>
<p>pip install ipykernel    #  在该虚拟环境下安装 ipykernel 包<br>
python -m ipykernel install --name 环境名   # 向 jupyter 中添加虚拟内核</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计组学习笔记]]></title>
        <id>https://jeromezjl.github.io/post/ji-zu-xue-xi-bi-ji/</id>
        <link href="https://jeromezjl.github.io/post/ji-zu-xue-xi-bi-ji/">
        </link>
        <updated>2022-03-19T10:22:49.000Z</updated>
        <content type="html"><![CDATA[<p>开个帖</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[cmd 中 curl 命令的使用]]></title>
        <id>https://jeromezjl.github.io/post/cmd-zhong-curl-ming-ling-de-shi-yong/</id>
        <link href="https://jeromezjl.github.io/post/cmd-zhong-curl-ming-ling-de-shi-yong/">
        </link>
        <updated>2022-03-17T08:36:24.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.cnblogs.com/zhuzhenwei918/p/6781314.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计组思维导图]]></title>
        <id>https://jeromezjl.github.io/post/ji-zu-si-wei-dao-tu/</id>
        <link href="https://jeromezjl.github.io/post/ji-zu-si-wei-dao-tu/">
        </link>
        <updated>2022-03-17T03:08:29.000Z</updated>
        <content type="html"><![CDATA[<p>https://zhuanlan.zhihu.com/p/98226508<br>
https://blog.csdn.net/weixin_47423314/article/details/114875087<br>
https://www.bilibili.com/read/cv5340324/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pykeyboard 和 Pymouse 自动化操作]]></title>
        <id>https://jeromezjl.github.io/post/pykeyboard-he-pymouse-de-shi-yong/</id>
        <link href="https://jeromezjl.github.io/post/pykeyboard-he-pymouse-de-shi-yong/">
        </link>
        <updated>2022-03-15T13:19:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="三篇参考文章">三篇参考文章：</h1>
<p>https://blog.csdn.net/weixin_51802807/article/details/121179861<br>
https://www.cnblogs.com/zjutlitao/p/10188434.html<br>
https://zhuanlan.zhihu.com/p/137133751</p>
<h1 id="技巧"><strong>技巧：</strong></h1>
<p>用cmd命令打开网页，这种方法可以省去鼠标操作可能带来的延迟，而且可以运行电脑上任何位置的程序<br>
https://blog.csdn.net/yekui/article/details/83802667<br>
start 网站 （用该语法打开网站）<br>
下面给出代码演示</p>
<pre><code class="language-python">from pykeyboard import *
import time   # 连续进行两个动作可能太快而效果不明显，因此加入暂停时间

k = PyKeyboard() #建立键盘对象

k.press_key(k.windows_l_key)  # 按住Win键
k.tap_key('r')  # 点击r键
k.release_key(k.windows_l_key)  # 松开Win键
time.sleep(0.2)  # 需等待界面跳转，0.2是极限，0.1就不好用了
k.tap_key(k.enter_key)

time.sleep(0.2)
k.type_string('start https://www.bilibili.com/?spm_id_from=333.999.b_696e7465726e6174696f6e616c486561646572.1')
k.tap_key(k.enter_key)
</code></pre>
<p>当然，用cmd更便于打开本地的文件，只需复制文件地址一步打开，下面给出演示</p>
<pre><code class="language-python">from pymouse import *    # 模拟鼠标所使用的包
from pykeyboard import *
import pyperclip
import time   # 连续进行两个动作可能太快而效果不明显，因此加入暂停时间

m = PyMouse()   # 鼠标的实例m
k = PyKeyboard() #建立键盘对象
x_dim, y_dim = m.screen_size()


k.press_key(k.windows_l_key)  # 按住win键
k.tap_key('r')  # 点击r键
k.release_key(k.windows_l_key)  # 松开win 键
time.sleep(0.5)
k.tap_key(k.enter_key)

pyperclip.copy(r&quot;C:\Users\ZJL\Desktop\软件\Firefox.lnk&quot;)
time.sleep(0.5)
k.press_key(k.control_key)
k.tap_key('v')
k.release_key(k.control_key)
k.tap_key(k.enter_key)
</code></pre>
<p>这里要说明的是，pykeyboard不能输入中文，需要用pyperclip对字符串进行copy，然后模拟键盘CTRL cv</p>
<h1 id="另外注意">另外注意：</h1>
<p>1）pykeyboard  组合键使用时，需要用小写字母<br>
<strong>例如：</strong><br>
模拟 alt+z</p>
<pre><code class="language-python">k.press_key(k.alt_key)  # 按住Alt键
k.tap_key('z')  # 点击z键
k.release_key(k.alt_key)  # 松开Alt键
</code></pre>
<p>2）用 m.position() 获取当前鼠标位置坐标<br>
3）需要引入time模块，调整触发时间</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【爬虫】curl转为python爬虫代码]]></title>
        <id>https://jeromezjl.github.io/post/pa-chong-curl-zhuan-wei-python-pa-chong-dai-ma/</id>
        <link href="https://jeromezjl.github.io/post/pa-chong-curl-zhuan-wei-python-pa-chong-dai-ma/">
        </link>
        <updated>2022-02-25T12:13:36.000Z</updated>
        <content type="html"><![CDATA[<p>http://tool.yuanrenxue.com/curl</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown 语法]]></title>
        <id>https://jeromezjl.github.io/post/markdown-yu-fa-guan-fang-jiao-cheng/</id>
        <link href="https://jeromezjl.github.io/post/markdown-yu-fa-guan-fang-jiao-cheng/">
        </link>
        <updated>2022-02-25T10:12:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="官方教程">官方教程：</h1>
<p>https://markdown.com.cn/basic-syntax/paragraphs.html</p>
<h1 id="常用">常用:</h1>
<p><strong>主标题</strong><br>
‘#’ + 字符</p>
<p><strong>加粗</strong><br>
’** ‘ + 字符+  ’**‘</p>
<p><strong>换行</strong><br>
Markdown 换行语法 在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行 (<br>)。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【leetcode】1323. 6 和 9 组成的最大数字]]></title>
        <id>https://jeromezjl.github.io/post/leetcode-1323-6-he-9-zu-cheng-de-zui-da-shu-zi/</id>
        <link href="https://jeromezjl.github.io/post/leetcode-1323-6-he-9-zu-cheng-de-zui-da-shu-zi/">
        </link>
        <updated>2022-02-25T10:08:23.000Z</updated>
        <content type="html"><![CDATA[<p>给你一个仅由数字 6 和 9 组成的正整数 num。</p>
<p>你最多只能翻转一位数字，将 6 变成 9，或者把 9 变成 6 。</p>
<p>请返回你可以得到的最大数字。</p>
<p>示例 1：</p>
<p>输入：num = 9669<br>
输出：9969<br>
解释：<br>
改变第一位数字可以得到 6669 。<br>
改变第二位数字可以得到 9969 。<br>
改变第三位数字可以得到 9699 。<br>
改变第四位数字可以得到 9666 。<br>
其中最大的数字是 9969 。<br>
示例 2：</p>
<p>输入：num = 9996<br>
输出：9999<br>
解释：将最后一位从 6 变到 9，其结果 9999 是最大的数。<br>
示例 3：</p>
<p>输入：num = 9999<br>
输出：9999<br>
解释：无需改变就已经是最大的数字了。</p>
<p>提示：</p>
<p>1 &lt;= num &lt;= 10^4<br>
num 每一位上的数字都是 6 或者 9 。</p>
<h1 id="my-solution">My Solution：</h1>
<pre><code class="language-python">class Solution(object):
    def maximum69Number (self, num):
            list1 = []
            stnum = list(str(num))
            for i in range(len(stnum)):
                stnum = list(str(num))
                stnum[i] = '9'
                list1.append(''.join(stnum))
            return int(max(list1))
</code></pre>
<h1 id="python的简单方法">Python的简单方法：</h1>
<pre><code class="language-python">def func(num):
    return int(str(num).replace('6','9',1))
print(func(9669))
</code></pre>
<p>利用replace函数，替换第一个6。根据贪心思想，把最前面的一个6替换为9即可得到最大值</p>
<h1 id="本题总结">本题总结：</h1>
<ol>
<li>int 为不可迭代对象，str可</li>
<li>join函数的用法</li>
<li>贪心思想</li>
</ol>
]]></content>
    </entry>
</feed>