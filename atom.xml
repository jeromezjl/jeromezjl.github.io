<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jeromezjl.github.io</id>
    <title>Jerome</title>
    <updated>2022-09-16T16:20:09.787Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jeromezjl.github.io"/>
    <link rel="self" href="https://jeromezjl.github.io/atom.xml"/>
    <subtitle>Jerome&apos;s blog</subtitle>
    <logo>https://jeromezjl.github.io/images/avatar.png</logo>
    <icon>https://jeromezjl.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Jerome</rights>
    <entry>
        <title type="html"><![CDATA[六级]]></title>
        <id>https://jeromezjl.github.io/post/liu-ji/</id>
        <link href="https://jeromezjl.github.io/post/liu-ji/">
        </link>
        <updated>2022-09-16T07:09:36.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.hjenglish.com/new/p1334552/">分值分布</a><br>
<a href="https://zhuanlan.zhihu.com/p/373774215">时间安排</a><br>
<a href="https://zhenti.burningvocabulary.com/login?uid=632280fbaafe55b3c209ddb6">做题的神仙网站（随时更新，能看单词意思）</a></p>
<p>高级词同义替换；使用复杂句式；灵活使用时态、语态</p>
<h1 id="六级作文类型">六级作文类型</h1>
<pre><code class="language-c">第一段
1~2 句提出问题，3过渡句

第二段
论点1 论据1
论点2 论据2
论点3 论据3

第三段
重申观点
提出希望
</code></pre>
<p>观点对立 / 分析利弊<br>
Some people think its bad others think its good</p>
<p>议论型</p>
<p><code>作文模板</code><br>
第一段</p>
<pre><code class="language-c">In the contemporary world 当今世界
there is no consensus among colledge students about the choice of career 没有定论
this proverb reveals that 
according to a recent survey conducted by
with the rapid growth of online shopping 
The popularity of smartphones makes the smartphone addiction increasingly commonplace

引起社会广泛关注
this phenomenon has become a worldwide social problem
... has stirred wide social concern

 反应了很多人对于...的看法
the concept of ... is gaining more popularity and striking deeper roots in people's heart
it reflects a number of people's concepts about ...
people come to realize that it is of practical value to stick to the famous saying:

引出谚语
As the well-known proverb goes
Though it is the insight summarized by our forefathers, it is correct and applicable in many case today.

解释谚语
The message it conveys is that

过渡句
Among countless reasons which support my view, there are three conspicuous aspects as follow
</code></pre>
<p>第二段</p>
<pre><code class="language-c">First and foremost, there is no doubt that ...
Moreover no one can deny that 
Last but not least, i firmly believe that


</code></pre>
<p>第三段</p>
<pre><code class="language-c">in conclusion / To sum up / All in all
while stressing... we should not neglect...

joint efforts should be made to promote...
we spare no efforts to do
if we try our upmost to do
the more.. the more...

our future will be both hopeful and rosy
The pursuit of ... should never be ceased 追逐...的步伐从不应该停止

</code></pre>
<p><code>高级短语</code></p>
<pre><code class="language-c">as it literally shows
the reason why
the overwhelming majority of 绝大多数
be reluctant to 不情愿
of practical value to do 有实际意义做
stick to 
reflect 反映
remarkable
reveal 揭示
tend to 
a high population of 56 percent of people
Thus
its urgent to do
as is universally acknowledged 
be of great significance
increasingly important
people believe that
extend to
the popularity of 
exerts multiple adverse impacts 造成多重不利影响
individual
all-pervasive 无所不在
quit a few peoper would deem that ... 少数人会认为
in contrast
intriguing 有趣
modern citizens
enhance
its obvious that
it's a high time that
joint efforts from relative authorities, teachers and students are required
Do bear in mind: 一定要记住
attach importance to
reinforce
one should adapt himself to the environment
</code></pre>
<h1 id="阅读">阅读</h1>
<p>找和题干最匹配的句子，句意、同义词替换<br>
读句子抓主谓宾，副词、形容词实在不知道可以先不卡看<br>
对比相似选项，看哪个和原文最匹配，防止误选</p>
<p><strong>段落匹配</strong><br>
先读题干句子，抓关键词<br>
看首尾句，明确段意<br>
抓句子关键词，带回段落定位</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Linux】Ubuntu]]></title>
        <id>https://jeromezjl.github.io/post/linux-ubuntu/</id>
        <link href="https://jeromezjl.github.io/post/linux-ubuntu/">
        </link>
        <updated>2022-09-13T02:08:10.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_44301630/article/details/122390018?app_version=5.7.5&amp;code=app_1562916241&amp;csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22122390018%22%2C%22source%22%3A%22unlogin%22%7D&amp;uLinkId=usr1mkqgl919blen&amp;utm_source=app">WSL2 Ubuntu 安装 /该方法的图形界面安装出错</a><br>
<a href="https://www.bilibili.com/video/BV1M94y1U7nc/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=0c47757b752e4a1eb04429ea32a157dc">VMware 安装</a><br>
该版本安装包：<br>
链接：https://pan.baidu.com/s/14I13g2N6hdeQf6RpL6Y9_g?pwd=xf0c<br>
提取码：xf0c</p>
<p><a href="https://blog.csdn.net/top_worker/article/details/45918399">Ubuntu 教程</a><br>
Tasksel 安装出错<br>
解决：<a href="https://mlog.club/article/3125331">系统范围的安装都需要 root 权限，使用 sudo</a></p>
<p><a href="https://blog.csdn.net/Davidietop/article/details/88909622">failed to fetch/配置 DNS 网关</a></p>
<p>进入 ROOT 模式：root -i</p>
<p><a href="https://blog.csdn.net/qq_42175986/article/details/82770878">文件操作</a><br>
<a href="https://blog.csdn.net/weixin_43798960/article/details/106891641">保存文件并退出</a></p>
<p><a href="https://www.bilibili.com/video/BV1w741147G9?spm_id_from=333.337.search-card.all.click&amp;vd_source=3d9ada7d42c971c0c3f04a22270daf33">环境变量讲解1</a><br>
<a href="https://www.bilibili.com/video/BV1nS4y1o7LG?spm_id_from=333.337.search-card.all.click&amp;vd_source=3d9ada7d42c971c0c3f04a22270daf33">环境变量讲解2</a><br>
<a href="https://www.bilibili.com/video/BV1pZ4y1N7pr?spm_id_from=333.337.search-card.all.click&amp;vd_source=3d9ada7d42c971c0c3f04a22270daf33">Linux 环境变量</a><br>
<a href="https://blog.csdn.net/K_K_yl/article/details/119756206">环境变量的配置</a></p>
<p><a href="https://blog.csdn.net/sydongjx/article/details/44081265">解决bash:没有那个文件或目录的方法</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Linux】Shell]]></title>
        <id>https://jeromezjl.github.io/post/linux-shell/</id>
        <link href="https://jeromezjl.github.io/post/linux-shell/">
        </link>
        <updated>2022-09-08T14:08:17.000Z</updated>
        <content type="html"><![CDATA[<p><a href="http://c.biancheng.net/linux_tutorial/">Linux 教程1</a><br>
<a href="https://www.runoob.com/linux/linux-tutorial.html">Linux 教程2</a><br>
<a href="https://www.runoob.com/linux/linux-intro.html">Linux shell 教程</a></p>
<p>对于 Windows 而言，其 cmd 和 powershell 都属于 shell 程序，但 cmd 能干的事 powershell 都能干。<a href="https://zhuanlan.zhihu.com/p/390464588#:~:text=powershell%E5%92%8Ccmd%E5%8C%BA%E5%88%AB%EF%BC%9A1%E3%80%81CMD%E5%86%99%E7%9A%84BAT%E8%84%9A%E6%9C%AC%E6%88%91%E4%BB%AC%E7%9C%8B%E4%BD%9C%E6%98%AF%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%9A%84%EF%BC%8C%E8%80%8CPowerShell%E5%88%99%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%2C%E6%98%AF%E4%B8%80%E7%A7%8D%E7%AB%99%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%80%85%E7%9A%84%E8%A7%92%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%84%9A%E6%9C%AC%E7%9A%84%E7%BC%96%E5%86%99%EF%BC%9B2%E3%80%81CMD%E5%8F%AA%E8%83%BD%E6%89%A7%E8%A1%8C%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%BB%BB%E5%8A%A1%EF%BC%8CPowerShell%E5%9B%A0%E4%B8%BA%E6%98%AF%E5%9F%BA%E4%BA%8E%E3%80%90.NET%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E3%80%82,%E6%9C%AC%E6%96%87%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%EF%BC%9Awindows7%E7%B3%BB%E7%BB%9F%E3%80%81Dell%20G3%E7%94%B5%E8%84%91%E3%80%82">参考文章</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【数据结构】递归]]></title>
        <id>https://jeromezjl.github.io/post/shu-ju-jie-gou-di-gui/</id>
        <link href="https://jeromezjl.github.io/post/shu-ju-jie-gou-di-gui/">
        </link>
        <updated>2022-09-06T13:56:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>递归乘法的实现（未考虑负数版）</strong></p>
<pre><code class="language-python">def multi(a, b):  # 返回 b 个 a 的和
    if b == 0:
        return 0
    else:
        return multi(a, b-1) + a

print(multi(2,3))
</code></pre>
<p><strong>递归实现斐波那契数列</strong></p>
<pre><code class="language-python">def f(n):  # 斐波那契
    if n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return f(n - 1) + f(n - 2)


print(f(10))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ML】神经网络与深度学习]]></title>
        <id>https://jeromezjl.github.io/post/ml-shen-jing-wang-luo-yu-shen-du-xue-xi/</id>
        <link href="https://jeromezjl.github.io/post/ml-shen-jing-wang-luo-yu-shen-du-xue-xi/">
        </link>
        <updated>2022-09-06T00:21:11.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://nndl.github.io/">邱锡鹏版</a><br>
<a href="https://zh-v2.d2l.ai/">《动手学深度学习》</a><br>
<a href="https://www.deeplearningbook.org/">Deep Learning Book</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL]]></title>
        <id>https://jeromezjl.github.io/post/sql/</id>
        <link href="https://jeromezjl.github.io/post/sql/">
        </link>
        <updated>2022-09-05T10:15:59.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.lintcode.com/course/14/learn/?chapterId=79&amp;sectionId=530">入门学习网站</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【数据结构】动态规划（Dynamic programming，DP）]]></title>
        <id>https://jeromezjl.github.io/post/shu-ju-jie-gou-dong-tai-gui-hua/</id>
        <link href="https://jeromezjl.github.io/post/shu-ju-jie-gou-dong-tai-gui-hua/">
        </link>
        <updated>2022-09-05T06:13:09.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1xb411e7ww?spm_id_from=333.337.search-card.all.click&amp;vd_source=3d9ada7d42c971c0c3f04a22270daf33">B站讲解</a><br>
<a href="https://zhuanlan.zhihu.com/p/365698607">知乎好文</a><br>
<code>适用题目特点</code></p>
<ol>
<li>计数</li>
</ol>
<ul>
<li>有多少种方式走到右下角</li>
<li>有多少种方法选出 k 个数使得和是 Sum</li>
</ul>
<ol start="2">
<li>求最大最小值</li>
</ol>
<ul>
<li>从左上角走到右下角路径的最大数字和</li>
<li>最长上升子序列长度</li>
</ul>
<ol start="3">
<li>求存在性</li>
</ol>
<ul>
<li>取石子游戏，先手是否必胜</li>
<li>能不能选出 k 个数使得和是 Sum</li>
</ul>
<p><code>最值型解题步骤</code></p>
<ol>
<li>确定状态</li>
</ol>
<ul>
<li>最后一步（最优策略中使用的最后一枚硬币 ak）</li>
<li>化成子问题（最少的硬币拼出前面的面值 27-ak）  {前两步和递归很像}</li>
</ul>
<ol start="2">
<li>转移方程</li>
</ol>
<ul>
<li>f(x) = min{f(x-2)+1, f(x-5)+1, f(x-7)+1}</li>
</ul>
<ol start="3">
<li>初始条件和边界情况</li>
</ol>
<ul>
<li>f(0) = 0，如果不能拼出Y，f(Y) = +∞</li>
</ul>
<ol start="4">
<li>计算顺序</li>
</ol>
<ul>
<li>从小到大计算，f(0)，f(1)，f(2)....</li>
</ul>
<p><a href="https://leetcode.cn/problems/coin-change/">leetcode 零钱兑换</a></p>
<p>题目分析：<br>
假设有面值为 2，5，7 的三种硬币无数个，要求用最少的硬币个数凑出 27<br>
<code>步骤</code><br>
先假定最优解的最后一个硬币面值为 ak，则之前的硬币总面值为 27-ak<br>
则定义一个函数 f(x) ，表示构成面值 x 最少要  f(x) 个硬币<br>
找到 f(x) 的递归定义， f(x) 是减去最后一枚硬币的面值的最小值<br>
对特殊情况分别讨论<br>
从小到大计算各个递归阶段的值，从而避免了递归中的重复计算</p>
<pre><code class="language-python">class Solution(object):
    def coinChange(self, coins, amount):
        f = [float('inf') for i in range(amount + 1)]  # 开辟从 0 到 amount 大小的数组，初始值设置为正无穷
        f[0] = 0  # 初始化 f[0] = 0 面值为 0 需要 0 个硬币
        # 这个 for 循环求凑出每一个面值最少需要多少硬币 f[1]、f[2]、f[3]...
        for i in range(1, amount + 1):  # i 代表面值，从 f[1] 开始，到 amount+1 共 amount 个数
            for j in coins:  # 遍历硬币的集合
                if i &gt;= j and f[i - j] != float('inf'):  # 如果 i 的面值比 j 大，且要判断的数有值
                    # f[i] 的值为 构成 i 面值去掉最后一枚 coin 的面值所需的硬币数，加一（最后一枚 取最小值
                    f[i] = min(f[i - j] + 1, f[i])
        if f[amount] == float('inf'):  # 如果最后没有被更新，则说明无法构成
            f[amount] = -1
        return f[amount]


coins = [2, 5, 7]
amount = 27
s = Solution()
print(s.coinChange(coins, amount))
</code></pre>
<p><code>例</code> <strong>动态规划实现斐波那契数列</strong></p>
<pre><code class="language-python">def f(n):  # 动态规划斐波那契函数（从 n = 1 开始）
    a = [1 for _ in range(n + 1)]  # 开辟 0 ~ n 的数组
    a[1] = 1  # 初始化第一项，注意，第 0 项不用
    if n &gt;= 2:  # 当 n 大于等于二的时候
        a[2] = 1  # 初始化第二项为 1
        for i in range(3, n + 1):  # 第三项往后满足递推关系
            a[i] = a[i - 2] + a[i - 1]
    return a[-1]  # 返回最后一项的值

# for i in range(1, 11):  # 检查前 10 项
#     print(f(i))
print(f(100))  # 直接出第 100 项的值，用暴力递归不行
</code></pre>
<p>【优化版本】根据分析实际进行操作的只有三个内存，所以直接用三个变量进行替代</p>
<pre><code class="language-python">def f(n):  # 动态规划斐波那契函数（从 n = 1 开始）
    if n == 1 or n == 2:
        return 1
    else:
        a = 1
        b = 1
        for i in range(2, n):
            sum = a + b  # 更新 c 的值
            a = b
            b = sum
    return sum  # 返回最后一项的值
</code></pre>
<p><code>例</code> <a href="https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/"><strong>剑指 Offer 10- II. 青蛙跳台阶问题</strong></a></p>
<p>【分析】此问题和斐波那契数列几乎一模一样，根据上面的类比此题即可</p>
<p>常规动态规划版</p>
<pre><code class="language-python">class Solution(object):
    def numWays(self, n):  # 跳了 n 个台阶有几种跳法
        a = [1 for _ in range(n + 1)]  # 开辟数组，初始化都为 1，a[0] = 1
        if n == 1:  # 单独判断 n 为 1 的时候，防止数组溢出
            a[1] = 1
        elif n &gt; 1:
            a[1] = 1  # 初始化前两个
            a[2] = 2
            for i in range(3, n + 1):  # 从第三位开始到最后写递推式
                a[i] = a[i - 1] + a[i - 2]
        return a[-1] % 1000000007  # 题目要求取模
</code></pre>
<p>【优化版本】根据分析实际进行操作的只有三个内存，所以直接用三个变量进行替代</p>
<pre><code class="language-python">class Solution(object):
    def numWays(self, n):  # 跳了 n 个台阶有几种跳法
        # 单独判断前三个取值
        if n == 0:  
            return 1
        elif n == 1:
            return 1
        elif n == 2:
            return 2
        # 计算一般情况
        a = 1  # 初始化
        b = 2
        for i in range(2, n):  # 执行 n-2 步迭代
            sum = a + b  # 更新 sum 的值
            a = b
            b = sum
        return sum % 1000000007
</code></pre>
<p>【再优化版】初始化 a，b 在一行；去掉了第三个变量 c ，直接用计算结果替换</p>
<pre><code class="language-python">class Solution:
    def numWays(self, n):
        a, b = 1, 1
        for _ in range(n):
            a, b = b, a + b  # a = b；b = a+b
        return a % 1000000007
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[操作系统笔记]]></title>
        <id>https://jeromezjl.github.io/post/cao-zuo-xi-tong-bi-ji/</id>
        <link href="https://jeromezjl.github.io/post/cao-zuo-xi-tong-bi-ji/">
        </link>
        <updated>2022-08-31T03:21:54.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43914604/article/details/104415990">CSDN 王道笔记</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyTorch 入门]]></title>
        <id>https://jeromezjl.github.io/post/pytorch-ru-men/</id>
        <link href="https://jeromezjl.github.io/post/pytorch-ru-men/">
        </link>
        <updated>2022-08-26T13:00:54.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/48982978">Tensor--张量</a><br>
<a href="https://www.zhihu.com/question/341328124">「张量」和「多维数组」有什么区别？</a><br>
<a href="https://blog.csdn.net/Lucky_Ape/article/details/113944257">张量、数组</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CNN 卷积神经网络]]></title>
        <id>https://jeromezjl.github.io/post/cnn-juan-ji-shen-jing-wang-luo/</id>
        <link href="https://jeromezjl.github.io/post/cnn-juan-ji-shen-jing-wang-luo/">
        </link>
        <updated>2022-08-23T11:36:08.000Z</updated>
        <content type="html"><![CDATA[<p>Convolutional Neural Network<br>
<a href="https://pytorch.org/">pyTorch 英文官网</a><br>
<a href="https://www.pytorch123.com/">pyTorch 教程中文</a><br>
<a href="https://www.w3cschool.cn/pytorch/">pyTorch w3cschool</a><br>
<a href="https://zhuanlan.zhihu.com/p/47184529">文档</a><br>
<a href="https://blog.csdn.net/mvtechnology/article/details/9008499">图像的通道数</a><br>
灰度图的通道数为1，彩色图的通道为3</p>
<p>CNN 基本结构：<br>
输入层<br>
卷积层：对特征进行提取<br>
池化层：对特征进行压缩<br>
全连接层：和传统神经网络一样，用于分类<br>
<code>注</code> CNN 的层数 = 卷积层数 + 全连接层数</p>
<p>卷积神经网络和普通神经网络相比，<br>
输入 CNN 的图像为三维图像，即为长、宽、颜色通道数（R、G、B）<br>
CNN 相当于传统神经网络（用于分类）加上了卷积和池化层（对特征的提取和处理）<br>
根据特征进行分类</p>
<p>卷积核（filter）<br>
包含三个参数，长、宽、通道数。其中长宽相等，通道数和输入通道数相等。</p>
<p>卷积过程：<br>
划分图像的区域，用卷积核（filter）扫描区域，卷积得到特征矩阵，三个通道同时进行</p>
<p>卷积核扫描<br>
卷积核与被扫描区域做内积运算，得到一个数值。三个通道相加，再加上 bias 得到最终结果。得到的结果称为特征图（feature map）</p>
<p>多特征图<br>
使用不同卷积核对图片进行扫描得到不同的特征图，特征更丰富。特征图个数称为深度，作为下一层卷积的通道数。</p>
<p><a href="https://blog.csdn.net/qq_41088475/article/details/105766758">通道数的确定</a><br>
第一层通道数为 RGB 三通道，后面卷积层的通道数 = 前一层特征图的总数 = 前一层卷积核个数</p>
<p>CNN 常用参数<br>
滑动窗口步长（stride）：卷积核每次移动走过的距离。一般设置为1<br>
卷积核尺寸：常用的为 3x3 （不能太大，特征提取不明显）<br>
边缘填充（pad）：为了解决区域边缘被扫描的次数较少的问题，在边缘添加一圈 0 ，使得原来的边界不为边界<br>
卷积核个数：决定了生成的特征图的数量、下一层的通道数。每个卷积核一定不同<br>
<a href="https://zhuanlan.zhihu.com/p/428448728">ReLU 激活函数</a><br>
<a href="https://zhuanlan.zhihu.com/p/77609689">Dropout</a></p>
<p>池化层：<br>
对卷积得到的特征进行筛选，筛选出重要的特征。<br>
常用池化方法：<br>
Max Pooling：扫描一定区域，选择区域中的最大值（提取最有用的特征）</p>
<p>网络结构：<br>
卷积（CONV）后面接着 RELU 激活函数，两层该结构，一层池化，重复累加</p>
<p>从池化层进入全连接层前，需要先把三维的数据转化为一维的向量</p>
<p>残差神经网络 Resnet<br>
随着 CNN 层数不断增加，效果不一定会越来越好，是为什么呢？因为某一层可能会效果不好，影响了总体的特征提取效果。Resnet 将其中效果不好的层的权重设置为 0 ，只保留对整体效果有益的层数，从而保证了，层数越多，深度越深，学习效果越好。不过提升程度可能很细微，但是总有提升。</p>
<p>迁移学习</p>
<h1 id="代码">代码</h1>
<p><a href="http://c.biancheng.net/pillow/">Pillow（PIL） 库：python 图像处理库</a></p>
<p><a href="https://blog.csdn.net/qq_34714751/article/details/85610804">tf 实现 CNN</a></p>
]]></content>
    </entry>
</feed>